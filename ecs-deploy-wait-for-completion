
#!/usr/bin/env bash
set -e
# SERVICE='backgroundcheck-processingservice'
# CLUSTER='integration'
# REGION='ap-southeast-2'
# IMAGE='047651431481.dkr.ecr.us-east-1.amazonaws.com/backgroundcheck-processingservice'
# TAG=88
# TIMEOUT=30

# Check requirements
function require {
    command -v $1 > /dev/null 2>&1 || {
        echo "Some of the required software is not installed:"
        echo "    please install $1" >&2;
        exit 1;
    }
}

# Check for AWS, AWS Command Line Interface
require aws
# Check for jq, Command-line JSON processor
require jq

while [[ $# > 0 ]]
do
    key="$1"

    case $key in
        -r|--region)
            REGION="$2"
            shift # past argument
            ;;
        -c|--cluster)
            CLUSTER="$2"
            shift # past argument
            ;;
        -n|--service-name)
            SERVICE="$2"
            shift # past argument
            ;;
        -i|--image)
            IMAGE="$2"
            shift
            ;;
        -b|--build)
            TAG="$2"
            shift
            ;;
        -t|--timeout)
            TIMEOUT="$2"
            ;;
        *)
        ;;
    esac
    shift # past argument or value
done

echo "region is $REGION"
echo "cluster is $CLUSTER"
echo "service is $SERVICE"
echo "image is $IMAGE"
echo "Buildnumber is $TAG"
echo "Timeout is $TIMEOUT"

echo "Using image name: $IMAGE:$TAG"

AWS_ECS_COMMAND="aws --output json ecs --region $REGION" #intended space at the end.
LATEST_TASK_DEF_ARN=`$AWS_ECS_COMMAND describe-task-definition --task-definition $SERVICE | jq -r .taskDefinition.taskDefinitionArn`
echo $LATEST_TASK_DEF_ARN

# See if the service is able to come up again
every=10
i=0
while [ $i -lt $TIMEOUT ]
do
  # Scan the list of running tasks for that service, and see if one of them is the
  # new version of the task definition
  RUNNING=$($AWS_ECS_COMMAND list-tasks --cluster $CLUSTER  --service-name $SERVICE --desired-status RUNNING \
    | jq -r '.taskArns[]' \
    | xargs -I{} $AWS_ECS_COMMAND describe-tasks --cluster $CLUSTER --tasks {} \
    | jq ".tasks[]| if .taskDefinitionArn == \"$LATEST_TASK_DEF_ARN\" then . else empty end|.lastStatus" \
    | grep -e "RUNNING" || : )

  if [ "$RUNNING" ]; then
    echo "Service updated successfully, new task definition running.";
    exit 0
  fi

    sleep $every
    i=$(( $i + $every ))
done

# Timeout
echo "ERROR: New task definition not running within $TIMEOUT seconds"
exit 1
#Contact GitHub API Training Shop Blog About
#Â© 2016 GitHub, Inc. Terms Privacy Security Status Help
